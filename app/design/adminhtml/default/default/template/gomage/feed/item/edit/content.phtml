<?php
 /**
 * GoMage.com
 *
 * GoMage Feed Pro
 *
 * @category     Extension
 * @copyright    Copyright (c) 2010 GoMage.com (http://www.gomage.com)
 * @author       GoMage.com
 * @license      http://www.gomage.com/licensing  Single domain license
 * @terms of use http://www.gomage.com/terms-of-use
 * @version      Release: 1.1
 * @since        Class available since Release 1.0
 */
	
	$feed = $this->getFeed();
	
	if($data = $this->getFeed()->getContent()){
		
		$data = json_decode($data, true);
		
	}else{
		$data = array();
	}
	
	
	
?>
<div class="entry-edit">
	<!--
	<div id="import_feed_data_container">
		
		<input type="text" id="import_feed_data_field" />
	</div>
	
	-->
	<div class="entry-edit-head">
    	<h4 class="icon-head head-edit-form fieldset-legend"><?php echo $this->__('Fields Mapping')?></h4>
	</div>
	<div id="content_fieldset" class="fieldset ">
		
		<div class="left">
			<p style="clear:both;padding-bottom:5px;overflow:hidden;">
				<label style="float:left;margin-right:20px; "><span style="float:left;margin-right:10px;"><?php echo $this->__('Show Header')?></span>
				<select style="width:50px;" name="show_headers">
					<option value="1" <?php if(intval($feed->getShowHeaders()) == 1 ):?> selected="selected" <?php endif;?>><?php echo $this->__('Yes');?></option>
					<option value="0" <?php if(intval($feed->getShowHeaders()) == 0 ):?> selected="selected" <?php endif;?>><?php echo $this->__('No');?></option>
				</select>
				</label>
	
				<label style="float:left;margin-right:20px; "><span style="float:left;margin-right:10px;"><?php echo $this->__('Delimiter')?></span>
				<!--<input class="input-text" style="width:50px;" type="text" name="delimiter" value="<?php echo $feed->hasDelimiter() ? htmlentities($feed->getDelimiter()) : ",";?>"/>-->
				<select style="width:100px;" name="delimiter">
					
					<option value="comma" <?php if(($feed->getDelimiter()) == 'comma' || !$feed->getDelimiter()):?> selected="selected" <?php endif;?>><?php echo $this->__('Comma');?></option>
					<option value="tab" <?php if(($feed->getDelimiter()) == 'tab' ):?> selected="selected" <?php endif;?>><?php echo $this->__('Tab');?></option>
					<option value="colon" <?php if(($feed->getDelimiter()) == 'colon' ):?> selected="selected" <?php endif;?>><?php echo $this->__('Colon');?></option>
					<option value="space" <?php if(($feed->getDelimiter()) == 'space' ):?> selected="selected" <?php endif;?>><?php echo $this->__('Space');?></option>
					<option value="vertical pipe" <?php if(($feed->getDelimiter()) == 'vertical pipe' ):?> selected="selected" <?php endif;?>><?php echo $this->__('Vertical pipe');?></option>
					<option value="semi-colon" <?php if(($feed->getDelimiter()) == 'semi-colon' ):?> selected="selected" <?php endif;?>><?php echo $this->__('Semi-colon');?></option>
					
				</select>
				</label>

				<label style="float:left; margin-right:20px;"><span style="float:left;margin-right:10px; "><?php echo $this->__('Enclosure')?></span>
				<!--<input class="input-text" style="width:50px;" type="text" name="enclosure" value="<?php echo $feed->hasEnclosure() ? htmlentities($feed->getEnclosure()) : '&quot;';?>"/>-->
				<select style="width:70px;" name="enclosure">
					
					<option value="2" <?php if(($feed->getEnclosure()) == 2 || !$feed->getDelimiter()):?> selected="selected" <?php endif;?>>"</option>
					<option value="1" <?php if(($feed->getEnclosure()) == 1):?> selected="selected" <?php endif;?>>'</option>
					<option value="3" <?php if(($feed->getEnclosure()) == 3):?> selected="selected" <?php endif;?>> </option>
					
				</select>
				</label>
			</p>
			<p style="clear:both">
				<label><span style="float:left; width: 170px;"><?php echo $this->__('Remove line break symbols')?></span>
				<select style="width:50px;" name="remove_lb">
					<option value="1" <?php if(intval($feed->getRemoveLb()) == 1 ):?> selected="selected" <?php endif;?>><?php echo $this->__('Yes');?></option>
					<option value="0" <?php if(intval($feed->getRemoveLb()) == 0 ):?> selected="selected" <?php endif;?>><?php echo $this->__('No');?></option>
				</select>
				</label><br/>
				<small><?php echo $this->__('This is the specific option that allows to remove line break symbols from a data feed.')?></small>
			</p>
		</div>
		<div class="right">
			<?php if($feed->getId()>0):?>
			<p style="clear:both;margin-bottom:7px;overflow:hidden;zoom:1;"><button onclick="setLocation('<?php echo $this->getUrl('*/*/mappingimport', array('id'=>$feed->getId()))?>');return false;" class="button"><span><span><?php echo $this->__('Import Fields Settings');?></span></span></button></p>
			<p style="clear:both;margin-bottom:7px;overflow:hidden;zoom:1;"><button onclick="setLocation('<?php echo $this->getUrl('*/*/mappingexport', array('id'=>$feed->getId()))?>');return false;" class="button"><span><span><?php echo $this->__('Export Fields Settings');?></span></span></button></p>
			<?php else:?>
			<script type="text/javascript">
				function showImportNotice(){
					if(typeof notice_timeout != 'undefined'){
						clearTimeout(notice_timeout);
					}
					$('import-notice').style.display = 'block';
					$('export-notice').style.display = 'none';
					notice_timeout = setTimeout(function(){
						$('import-notice').style.display = 'none';
					}, 5000)
				}
				function showExportNotice(){
					if(typeof notice_timeout != 'undefined'){
						clearTimeout(notice_timeout);
					}
					$('import-notice').style.display = 'none';
					$('export-notice').style.display = 'block';
					notice_timeout = setTimeout(function(){
						$('export-notice').style.display = 'none';
					}, 5000)
				}
			</script>
			<p style="clear:both;margin-bottom:7px;overflow:hidden;zoom:1;"><button style="float:right" onclick="showImportNotice();return false;" class="button disabled"><span><span><?php echo $this->__('Import Fields Settings');?></span></span></button></p>
			<p style="clear:both;margin-bottom:7px;overflow:hidden;zoom:1;"><button style="float:right" onclick="showExportNotice();return false;" class="button disabled"><span><span><?php echo $this->__('Export Fields Settings');?></span></span></button></p>
			<p id="import-notice" style="clear:both;margin-bottom:7px;overflow:hidden;zoom:1;display:none;"><?php echo $this->__('After you save a new feed for the first time the "Import Fields Settings" button will be available')?></p>
			<p id="export-notice" style="clear:both;margin-bottom:7px;overflow:hidden;zoom:1;display:none;"><?php echo $this->__('After you save a new feed for the first time the "Export Fields Settings" button will be available')?></p>
			<?php endif;?>
		</div>
		<div class="grid" style="clear:both">
		<style>
					.grid table td {vertical-align:middle;}
		</style>
		<table cellspacing="0" cellpadding="0" class="data" style="width:100%;">
			<thead>
				<tr class="headings">
				<th width="20"><?php echo $this->__('Order')?></th>
				<th style="width:160px;"><?php echo $this->__('Field Name')?></th>
				<th><?php echo $this->__('Prefix')?></th>
				<th><?php echo $this->__('Type')?></th>
				<th width="100"><?php echo $this->__('Value')?></th>
				<th><?php echo $this->__('Suffix')?></th>
				<th><?php echo $this->__('Output Type')?></th>
				<th style="width:66px;"><?php echo $this->__('Action')?></th>
				</tr>
			</thead>
			<tbody id="mapping-table-body">
				<?php
					
					if(empty($data)){
						$rows_count = 5;
					}else{
						$rows_count = count($data);
					}
					
				?>
				<?php for($i=0;$i<$rows_count;$i++):?>
				<tr>
					<td><div style="padding:0 2px;border-color:#AAAAAA #C8C8C8 #C8C8C8 #AAAAAA;border-style:solid;border-width:1px;"><input style="width:100%;border:0;padding:0;" type="text" class="input-text" name="field[<?php echo $i;?>][order]" value="<?php echo @$data[$i]['order'];?>" /></div></td>
					<td ><div style="padding:0 2px;border-color:#AAAAAA #C8C8C8 #C8C8C8 #AAAAAA;border-style:solid;border-width:1px;"><input style="width:100%;border:0;padding:0;" type="text" class="input-text" name="field[<?php echo $i;?>][name]" value="<?php echo htmlentities(@$data[$i]['name']);?>" /></div></td>
					<td><div style="padding:0 2px;border-color:#AAAAAA #C8C8C8 #C8C8C8 #AAAAAA;border-style:solid;border-width:1px;"><input style="width:100%;border:0;padding:0;" type="text" class="input-text" name="field[<?php echo $i;?>][prefix]" value="<?php echo htmlentities(@$data[$i]['prefix']);?>" /></div></td>
					<td>
						<div style="margin: 2px;">
						<select style="width:100%;" onchange="changeValueType(this, <?php echo $i;?>)" type="text" name="field[<?php echo $i;?>][type]">
							<option <?php echo isset($data[$i]['type']) && $data[$i]['type'] == 'attribute' ? 'selected="selected"' : '';?> value="attribute"><?php echo $this->__('Attribute')?></option>
							<option <?php echo isset($data[$i]['type']) && $data[$i]['type'] == 'static' ? 'selected="selected"' : '';?> value="static"><?php echo $this->__('Static Value')?></option>
						</select>
						</div>
					</td>
					<td>
						<input style="width:98%;display:<?php echo isset($data[$i]['type']) && $data[$i]['type'] == 'static' ? 'block' : 'none';?>;"  id="mapping-<?php echo $i;?>-static-value" type="text" class="input-text" name="field[<?php echo $i;?>][static_value]" value="<?php echo htmlentities(@$data[$i]['static_value'])?>" />
						<?php echo $this->getAttributeSelect($i, @$data[$i]['attribute_value'], (isset($data[$i]['type']) && $data[$i]['type'] == 'attribute' || !isset($data[$i]['type'])))?></td>
					<td><div style="padding:0 2px;border-color:#AAAAAA #C8C8C8 #C8C8C8 #AAAAAA;border-style:solid;border-width:1px;"><input style="width:100%;border:0;padding:0;" type="text" class="input-text" name="field[<?php echo $i;?>][sufix]" value="<?php echo htmlentities(@$data[$i]['sufix']);?>" /></div></td>
					<td>
						<div style="margin: 2px;">
						<select style="width:100%;" type="text" name="field[<?php echo $i;?>][output_type]">
							<option <?php echo !isset($data[$i]['output_type']) || $data[$i]['output_type'] == '' ? 'selected="selected"' : '';?> value=""><?php echo $this->__('Default')?></option>
							<option <?php echo isset($data[$i]['output_type']) && $data[$i]['output_type'] == 'int' ? 'selected="selected"' : '';?> value="int"><?php echo $this->__('Integer')?></option>
							<option <?php echo isset($data[$i]['output_type']) && $data[$i]['output_type'] == 'float' ? 'selected="selected"' : '';?> value="float"><?php echo $this->__('Float')?></option>
							<option <?php echo isset($data[$i]['output_type']) && $data[$i]['output_type'] == 'striptags' ? 'selected="selected"' : '';?> value="striptags"><?php echo $this->__('Striptags')?></option>
							<option <?php echo isset($data[$i]['output_type']) && $data[$i]['output_type'] == 'htmlspecialchars' ? 'selected="selected"' : '';?> value="htmlspecialchars"><?php echo $this->__('Encode special chars')?></option>
							<option <?php echo isset($data[$i]['output_type']) && $data[$i]['output_type'] == 'htmlspecialchars_decode' ? 'selected="selected"' : '';?> value="htmlspecialchars_decode"><?php echo $this->__('Decode special chars')?></option>
						</select>
						</div>
					</td>
					<td><button onclick="removeMappingRow(this);return false;" class="button"><span><span><?php echo $this->__('Remove')?></span></span></button></td>
				</tr>
				<?php endfor;?>
			</tbody>
		</table>
		<div class="button-set">
			<script type="text/javascript">
				
				var mappingTotalRows = <?php echo $rows_count?>;
				
				function changeValueType(e, i){
					
					if(e.value == 'static'){
						$('mapping-'+i+'-static-value').style.display = 'block';
						$('mapping-'+i+'-attribute-value').style.display = 'none';
					}else{
						$('mapping-'+i+'-static-value').style.display = 'none';
						$('mapping-'+i+'-attribute-value').style.display = 'block';
					}
					
				}
				
				function removeMappingRow(e){
					e.parentNode.parentNode.parentNode.removeChild(e.parentNode.parentNode);
				}
				
				function addColumn(tr, content){
					
					td = document.createElement('td');
					td.innerHTML = content;
					tr.appendChild(td);
					
				}
				
				function addMappingRow(){
					
					var i = ++mappingTotalRows;
					var tr = document.createElement('tr');
					
					var attribute = '<?php echo addslashes($this->getAttributeSelect("[iterator]"));?>';
					
					addColumn(tr, '<div style="padding:0 2px;border-color:#AAAAAA #C8C8C8 #C8C8C8 #AAAAAA;border-style:solid;border-width:1px;"><input style="width:100%;border:0;padding:0;" class="input-text" name="field['+i+'][order]" value="" /></div>');
					addColumn(tr, '<div style="padding:0 2px;border-color:#AAAAAA #C8C8C8 #C8C8C8 #AAAAAA;border-style:solid;border-width:1px;"><input style="width:100%;border:0;padding:0;" type="text" class="input-text" name="field['+i+'][name]" value="" /></div>');
					addColumn(tr, '<div style="padding:0 2px;border-color:#AAAAAA #C8C8C8 #C8C8C8 #AAAAAA;border-style:solid;border-width:1px;"><input style="width:100%;border:0;padding:0;"type="text" class="input-text" name="field['+i+'][prefix]" value="" /></div>');
					addColumn(tr, '<div style="margin: 2px;"><select style="width:100%;" onchange="changeValueType(this, '+i+')" type="text" name="field['+i+'][type]"><option value="attribute"><?php echo $this->__('Attribute')?></option><option value="static"><?php echo $this->__('Static Value')?></option></select></div>');
					addColumn(tr, '<input style="width:98%; display:none;" id="mapping-'+i+'-static-value" type="text" class="input-text" name="field['+i+'][static_value]" value="" />'+attribute.replace(/\[iterator\]/g, i));
					addColumn(tr, '<div style="padding:0 2px;border-color:#AAAAAA #C8C8C8 #C8C8C8 #AAAAAA;border-style:solid;border-width:1px;"><input style="width:100%;border:0;padding:0;" type="text"  class="input-text" name="field['+i+'][sufix]" value="" /></div>');
					addColumn(tr, '<div style="margin: 2px;"><select style="width:100%;" type="text" name="field['+i+'][output_type]"><option selected="selected" value=""><?php echo $this->__('Default')?></option><option value="int"><?php echo $this->__('Integer')?></option><option value="float"><?php echo $this->__('Float')?></option><option value="striptags"><?php echo $this->__('Striptags')?></option><option value="htmlspecialchars"><?php echo $this->__('Encode special chars')?></option><option value="htmlspecialchars_decode"><?php echo $this->__('Decode special chars')?></option></select></div>');
					addColumn(tr, '<button onclick="removeMappingRow(this);return false;" class="button"><span><span><?php echo $this->__('Remove')?></span></span></button>');
					
					$('mapping-table-body').appendChild(tr);
					
				}
				
			</script>
			<p style="margin-top:10px;"><button onclick="addMappingRow();return false;" class="button"><span><span><?php echo $this->__('Add New Row')?></span></span></button></p>
		</div>
		</div>
	</div>
</div>
<!--
<script type="text/javascript">
		
		
		var uploaderTemplate = '<div class="no-display" id="[[idName]]-template">' +
                            '<div id="{{id}}" class="file-row file-row-narrow">' +
                                '<span class="file-info">' +
                                    '<span class="file-info-name">{{name}}</span>' +
                                    ' ' +
                                    '<span class="file-info-size">({{size}})</span>' +
                                '</span>' +
                                '<span class="progress-text"></span>' +
                                '<div class="clear"></div>' +
                            '</div>' +
                        '</div>' +
                            '<div class="no-display" id="[[idName]]-template-progress">' +
                            '{{percent}}% {{uploaded}} / {{total}}' +
                            '</div>';

		var fileListTemplate = '<span class="file-info">' +
                            '<span class="file-info-name">{{name}}</span>' +
                            ' ' +
                            '<span class="file-info-size">({{size}})</span>' +
                        '</span>';
                        
        var dataimport = {
		    uploaderObj : $H({}),
		    objCount : 0,
		    setUploaderObj : function(type, key, obj){
		        if (!this.uploaderObj.get(type)) {
		            this.uploaderObj.set(type, $H({}));
		        }
		        this.uploaderObj.get(type).set(key, obj);
		    },
		    getUploaderObj : function(type, key){
		        try {
		            return this.uploaderObj.get(type).get(key);
		        } catch (e) {
		            try {
		                console.log(e);
		            } catch (e2) {
		                alert(e.name + '\n' + e.message);
		            }
		        }
		    },
		    unsetUploaderObj : function(type, key){
		        try {
		            this.uploaderObj.get(type).unset(key);
		        } catch (e) {
		            try {
		                console.log(e);
		            } catch (e2) {
		                alert(e.name + '\n' + e.message);
		            }
		        }
		    }
		    
		};
		
		dataimport.FileUploader = Class.create();
		dataimport.FileUploader.prototype = {
		    type : null,
		    key : null, //key, identifier of uploader obj
		    elmContainer : null, //insert Flex object and templates to elmContainer
		    fileValueName : null, //name of field of JSON data of saved file
		    fileValue : null,
		    idName : null, //id name of elements for unique uploader
		    uploaderText: uploaderTemplate,
		    uploaderSyntax : /(^|.|\r|\n)(\[\[(\w+)\]\])/,
		    uploaderObj : $H({}),
		    config : null,
		    initialize: function (type, key, elmContainer, fileValueName, fileValue ,idName, config) {
		        this.type = type;
		        this.key = key;
		        this.elmContainer = elmContainer;
		        this.fileValueName = fileValueName;
		        this.fileValue = fileValue;
		        this.idName = idName;
		        this.config = config;
		        uploaderTemplate = new Template(this.uploaderText, this.uploaderSyntax);
		        
		        alert(elmContainer);
		        
		        Element.insert(
		            elmContainer,
		            {'top' : uploaderTemplate.evaluate({
		                    'idName' : this.idName,
		                    'fileValueName' : this.fileValueName,
		                    'uploaderObj' : 'dataimport.getUploaderObj(\''+this.type+'\', \''+this.key+'\')'
		                })
		            }
		        );
		        if ($(this.idName+'_save')) {
		            $(this.idName+'_save').value = this.fileValue.toJSON();
		        }
		        dataimport.setUploaderObj(
		            this.type,
		            this.key,
		            new Flex.Uploader(this.idName, '<?php echo $this->getSkinUrl('media/uploaderSingle.swf') ?>', this.config)
		        );
		        /*
		        if (varienGlobalEvents) {
		            varienGlobalEvents.attachEventHandler('tabChangeBefore', Downloadable.getUploaderObj(type, key).onContainerHideBefore);
		        }
		        new Downloadable.FileList(this.idName, Downloadable.getUploaderObj(type, key));
		        */
		    }
		}
		
		new dataimport.FileUploader(
            'linkssample',
            'linkssample_'+1,
            $('import_feed_data_container'),
            'downloadable[link]['+1+'][sample]',
            function(){alert(123);},
            'downloadable_link_'+1+'_sample_file',
        	{
        		url:'<?php echo $this->getUrl();?>',
        		params:{form_key:'key'},
        		file_field:'import_feed_data_field',
        		replace_browse_with_remove:1,
        		width:32
        	
        	}
        );
        
	
	</script>

-->











